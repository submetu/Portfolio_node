extends layout

block content
  .container.work-detail-main
    .heading#heading-top
      h1 IMDb Movie Search
      h4 
        a.github(href="https://github.com/submetu/IMDb-Movie-Search" target="_blank") Github Repository
      h5 JavaScript jQuery AJAX
    .detail
      p
      | IMDb is the biggest movie database in the world. Almost everybody knows it. Getting data from IMDb about movies is not an easy task. However there are third party websites like OMDb which takes their data from IMDb and provide an API for developers to use in their web apps. This project makes use of the API provided by OMDb.
      .detail-img
        img.img-responsive(src='/img/movie_search_img_3.png')
      h3 Objectives
      p
      | The objective of this web app is to allow the user to search movies by title and/or release year. The search displays the most relevant movies to the user. Upon clicking a movie, a custom web page is displayed that shows some information regarding that movie that includes the title, release date, IMDb rating, a plot and a poster image. In addition to all this, the user can go to the IMDb website of the movie as well by clicking on the movie title or the button after the plot.
      .detail-img-large
        img.img-responsive(src='/img/movie_search_img_1.png')
      h3 Challenges
      p
      | Challenges during the project included getting the poster API from OMDb. Since the web app makes AJAX calls from the front-end to the OMDb API, the same origin policy does not allow the user to access third party APIs. However making a jsonP call allowed me to get not all, but most of the required data. The poster API was not being available on Google Chrome due to some restrictions. After applying for a key on OMDb for the poster API, I was able to successfully get all the poster images of the movies. Another minor challenge was to reset the url that the movie title in the description pointed towards. There was a bug that the title always pointed towards the same movie but it was fixed easily by some code. The following snippet demonstrates a part of the code.
      p
      pre.prettyprint
        | //make an ajax call to get the imdb rating and the plot
        |   $.getJSON(&quot;http://www.omdbapi.com/?t=&quot;+title+&quot;&amp;plot=full&quot;,function(response){
        |     //setting the movie search field to empty after a movie is clicked
        |     $(&apos;#search&apos;).val(&apos;&apos;);
        |     //setting the year search field to empty after a movie is clicked
        |     $(&apos;#year&apos;).val(&apos;&apos;);
        |     //getting the plot of the clicked movie
        |     var plot=response.Plot;
        |     //getting the imdb rating of the clicked movie
        |     var imdbRating=response.imdbRating;
        |     // get the image url of the clicked movie
        |     var imgUrl=response.Poster;
        |     // get the imdb id
        |     var imdbId=&quot;http://www.imdb.com/title/&quot;+response.imdbID;
        |     //console.log(response);
        |     //hide the movies that were searched
        |     $(&apos;#movies&apos;).hide();
        |     //set the heading text 
        |     $headingDiv.text(title+&apos; (&apos;+year+&apos;)&apos;);
        |     //set the rating text
        |     $ratingDiv.text(&quot;IMDB Rating: &quot;+imdbRating);
        |     //set the description
        |     $descriptionPara.text(plot);
        |     //set the image url of the title image
        |     $titleDiv.html(&apos;img&apos;);
        |     $titleDiv.children().attr(&quot;src&quot;,&quot;http://img.omdbapi.com/?apikey=fe9f4454&amp;i=&quot;+response.imdbID);
        |     //set the button href attribute 
        |     $button.attr(&quot;href&quot;,imdbId);
        |     //set the imdb url of the movie title link
        |     $headingDivAnchor.attr(&quot;href&quot;,imdbId);
        |     //if the image url returns &apos;N/A&apos;
        |     if(imgUrl===&apos;N/A&apos;){
        |       $titleDiv.html(&apos;i.material-icons.poster-placeholder crop_original&apos;);
        |     }
        |     //scroll to the top of the page
        |     window.scrollTo(0, 0);
        |     //show the description page of the clicked movie
        |     $mainDescriptionDiv.show();
        |   });//end ajax call
        |   //Click listener on the Search results line
        |   $(&apos;.top-div a&apos;).on(&quot;click&quot;,function(){
        |       $(&apos;#movies&apos;).show();
        |       $(&apos;.main&apos;).hide();
        |   });//end click listener


      .detail-img-landscape
        img.img-responsive(src='/img/movie_search_img_2.png')
      h3 Results
      p
      | The final app made successful AJAX calls to the OMDb api and got the required data according to the user input. The web app also displayed correct custom made pages displaying the correct information of the clicked movie. The app was responsive and extremely efficient in its asynchronous nature. 
      include ./partials/_work_detail_end
  script(src='https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js')    
  include ./partials/_js
