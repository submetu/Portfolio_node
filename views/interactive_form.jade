extends layout

block content
  .container.work-detail-main
    .heading#heading-top
      h1 Interactive Validator Form
      h4 
        a.github(href="https://github.com/submetu/Interactive-form" target="_blank") Github Repository
      h5 JavaScript jQuery
    .detail
      p
      | A simple form takes only a few minutes to build. However, adding client-side validation and making sure that the user is submitting the data that is being expected by the server isn't so simple. Making a good validation form which is interactive is a must for optimal user experience. This project features an interactive form with various validations such as correct email validation, credit card, Zip code and CVV number validations. 
      .detail-img-large
        img.img-responsive(src='/img/interactive_form_img_1.png')
      h3 Objectives
      p
      | THe objective of this project is to deliver feedback to the user on the client-side before the POST request even leaves the user's browser. This method is quick and delivers a great user experience. Not only is it good for the user but also for us developers. This method ensures that the server won't receive any faulty data and it wont have to validate every form field, so it can do other things. Server side validation is important for sensitive information though, but if a user forgets to enter a field that is must or if they enter a wrong credit card number, then the server shouldn't be bothered with it. Moreover, the form is well designed, responsive and has custom drop-down select menus that override the default select menus in the user's device to add more immersiveness. 
      .detail-img-landscape
        img.img-responsive(src='/img/interactive_form_img_3.png')
      h3 Challenges
      p
      | In this form there is a section in which the users have to choose which Tech-talks they want to attend. There are a few available but some of their timings clash with each other. So, using JavaScript and jQuery, the form doesn't allow the user to select events that are at the same time. This is not hard-coded so in case of another event or time changes, the program will still work and won't allow the user to choose events that clash. This was achieved by reading the string values, parsing them to numbers, and comparing them against the other options that were chosen by the user. The clashing events are greyed out so the user can't select them. 
      p
      pre.prettyprint.
        //Event Listeners
        //Allow only numbers to be entered in the zip field
        $('#zip').on('keypress', function(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            return !(charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57));
        });
        //Allow only numbers to be entered in the cvv field
        $('#cvv').on('keypress', function(evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            return !(charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57));
        });
        //if job role of 'other' is selected, show a text field
        $('#title').on("change",function(){ //when there is change in the select element
           if($(this).val()==="other"){ //if the value of the option selected is 'other'
            $("#other-title").show().focus(); //show the text field and put focus on it
        }
            else{ //if the value of the option is not selected as 'other'
                $("#other-title").hide(); //hide the text field
            }
        });
        //if the design select changes, display the appropriate color select to the user
        $("#design").on("change",function(){ //when there is change on this select element
            if($(this).val()==="js puns"){ //if the value of the option selected is 'js puns'
                //SHOW THE JS PUNS SELECT MENU AND HIDE THE I LOVE JS SELECT MENU
                $("select#puns").parent().show();
                $('#colors-js-puns').show();
                $("select#love").parent().hide();//show the $PunsSelect select element
            }
            if($(this).val()==="heart js"){ //if the value of the option selected is 'heart js'
                //SHOW THE I LOVE JS SELECT MENU AND HIDE THE JS PUNS SELECT MENU
                $("select#love").parent().show();
                $('#colors-js-puns').show();
                $("select#puns").parent().hide();//show the $LoveSelect select element
            }
            if ($(this).val()=="Select Theme"){ //if the value of the option selected is 'Select Theme'
                //HIDE ALL THE SELECT MENUS
                $('#colors-js-puns').hide();
            }
        });
        ///PAYMENT INFO
        $('#payment').on("change",function(){
           if($(this).val()==="select_method") {
               showHidePayment("select");
           }
           if($(this).val()==="credit card") {
               showHidePayment("credit");
           }
           if($(this).val()==="paypal") {
               showHidePayment("pay");
           }
           if($(this).val()==="bitcoin") {
               showHidePayment("bit");
           }
        });  


      .detail-img-landscape
        img.img-responsive(src='/img/interactive_form_img_2.png')
      h3 Results
      p
      | This form is a client-side project which means that it won't send an actual request to a server yet. However, the front-end has been completely programmed and the back-end can be easily programmed in order to handle the POST request made by the form submission. After that the data might be transferred to a database or emailed to a person responsible for handling the data.
      include ./partials/_work_detail_end 
  script(src='https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js')    
  include ./partials/_js
