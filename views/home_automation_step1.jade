extends layout

block content
  .container.work-detail-main
    .heading#heading-top
      h1 First Steps
      h5 Node.Js Socket.io MQTT Arduino 
    .detail
      p
      | Home automation and IOT is getting bigger everyday. I'm also working on such a project with a friend to create cheap, reliable, secure and fast implementation of automation in home appliances. We have many goals for this project and the every decision is governed by many factors. The most important of all those are:
      ul.list
        li User comfort
        li Security
        li Reliability
        li Energy saving
      p The above mentioned requirements are key and are planned to be fulfilled in every step of the way. The beginning of our project includes the basic implementation of any home automation system - communication. 
      h3 Node.Js and Socket.io
      p For this reason, we decided to lay our foundations on Node.Js that will handle the HTTP server. It will be hosted on the Raspberry Pi that will be connected to a router (which is common in every household). In addition to a HTTP server, Web Sockets are also used in order to provide user comfort such that they don't have to refresh the page every time a change happens on the user interface. Changes are real time and are emitted across all clients connected to the HTTP server. A simple example of this, in this case, is a temperature sensor readings changes when you put your finger on it. So lets say I open my mobile's web browser and point it to the IP address of the raspberry pi. My browser makes a request to the HTTP server hosted on the raspberry pi which gives me a response in the form of a simple HTML page that displays the temperature reading. If my friend Bob now opens his browser and does the same, he will see the same web page as well. Imagine now, that our friend John puts his finger on the temperature sensor. The temperature sensor will begin to emit values that are higher now. Imagine now that Bob and I still get the same temperature reading from before. Imagine that we have to refresh our page to get the new temperature reading because of John touching the temperature sensor. Its not very pleasant and preferable. Web Sockets allow a constant connection between the server and the client as opposed to HTTP requests that require the user to refresh the browser. In addition to that, both Bob and I will get the changed temperature reading simultaneously which makes it even more better.
      h3 MQTT
      p The communication protocol between devices is on MQTT which stands for Message Queue Telemetry Transport. It is a very light weight publish/subscribe protocol that sits on top of the TC/IP protocol. Its really suited for IOT projects and it ensures sercurity (through encryption) and reliability (through QOS (quality of service)). The MQTT broker will be hosted on the raspberry pi as well (on a different port). The broker will be responsible for distributing messages to subscribed clients. The messages are subscribed and published on 'topics'. To explain this, lets say there is a smoke sensor in your kitchen. Your teenage is alone at home and lights a cigarette in the kitchen without knowing about the sensor that you installed in your home automation system. The sensor value will exceed some pre-defined threshold. The sensor will publish a message 'FIRE' on a topic '/kitchen/fire'. The water sprinkler, a text messaging service on the server, a call service to the fire department on the server and an alarm, all are subscribed to the topic '/kitchen/fire'. They will all get the message 'FIRE' and they can carry out further instructions given to them. The message transfer was handled by the broker. Then only catch here is that all the devices, including the broker have to be connected to the router through Wi-Fi or ethernet. 
      h3 Arduino
      p For the first step we used a simple arduino in order to create a very young an immature prototype. Later it might be replaced by other modules that have built-in Wi-Fi such as Esp8266. The arduino here has a MQTT library sketch uploaded on it. It also has the LED and the temperature sensor attached to it. The arduino basically gets the readings and states of the temperature sensor and the LED respectively and publishes them on topics. It also handles some subscriptions in order to turn the LED on or off. The arduino is using the Ethernet shield to connect to the router in this case. We didn't use the Wi-Fi shield as it was expensive and we knew that we will select a different wireless solution later on anyway as we won't be using the arduino. The arduino in this project just ties all the basic communication protocols used in order for us to see some results while we tweak the servers. 

      .detail-img
        img.img-responsive(src='/img/home_automation_step1_img_1.png')
      p
      | The above screen-shot is from the ultra-simple front-end (it is still responsive). It has two buttons to turn on and off the LED. It also shows the current temperature and the time. The temperature value is updated every 5 seconds in this prototype. The real stuff is happening at the server and the broker where all data is being thrown around. A breadboard setup of the simple LED and temperature sensor is shown below.
      .detail-img
        img.img-responsive(src='/img/home_automation_step1_img_2.png')
      p
      | The LED is yellow and does not require any resistor. If this was a red LED, you are supposed to use a resistor otherwise it will work for 2-3 seconds and it will never work again. The LM-35 temperature sensor was used as its dirt cheap and is very responsive for its size and price. Both components were intentionally installed close to each other so that when the LED is turned on from the browser, the temperature sensor value will increase(because of the heat generated from the LED). This was done so that we don't have to touch the sensor every time in order for the temperature reading to change.
      

      h3 Results
      p
      | When you press the 'ON' button on the web page, you fire up a jQuery event 'click' which emits a socket.io event called 'led:on'. The server is programmed to listen to the event. So the server publishes out a message on a topic called 'led:on'. The broker which is running on the raspberry pi as well gets this publish request and publishes out to every device connected to it. The arduino is subscribed to this topic and upon getting a message on this topic, it sets the digital state of pin 6 to HIGH. These are the basics of using a web server, socket.io, MQTT and arduino together to control devices connected to the arduino from the browser. One thing to notice is that socket.io events and MQTT publications can hold real time data with them, for example, the temperature values. So you can pass data around with these techniques, which is essential in any home automation system.
      include ./partials/_work_detail_end
  script(src='https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js')    
  include ./partials/_js
