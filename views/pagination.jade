extends layout

block content
  .container.work-detail-main
    .heading#heading-top
      h1 Pagination and User Search
      h4 
        a.github(href="https://github.com/submetu/Pagination_Search" target="_blank") Github Repository
      h5 JavaScript jQuery
    .detail
      p
      | Whenever there is more data than a page can handle, instead of cramming all the data on to one page, a common and elegant way is to use pagination. While searching a database of users, pagination is very useful and this application does exactly that.
      .detail-img-landscape
        img.img-responsive(src='/img/pagination_img_3.png')
      h3 Objectives
      p
      | The purpose of this project is to showcase the ability to paginate lots of data. Also, users can search for the data, in this case, according to the name and email of the students. The search is in real time so on every key press the search updates and shows the closest match. In the case that no student matches the search entry, the page notifies the user. 
      .detail-img-landscape
        img.img-responsive(src='/img/pagination_img_2.png')
      h3 Challenges
      p
      | This is a fairly simple project using jQuery libraries for search features and paginations. However, this project used NO jQuery libraries. Instead, all the code is written in plain JavaScript and jQuery. This gave me the opportunity to make the pagination as customisable as possible. The user can choose how many students should be displayed at a time and the pagination adjusts accordingly. The search feature tries to get the closes match and after every key stroke, it displays the match. This is all done without any jQuery library. A sample code snippet from the original code is provided below.
      p
      pre.prettyprint.
       //FUNCTIONS
        //function runs when the user presses the search button or writes something in the input search box.
        function keyUpFunction(){
            //Store the keyUps in the variable filter
            var filter=$studentSearchInput.val();
            //hide the noResult html 
            $noResult.hide();
            //If there is something in the input box
            if(filter){
                //the students that are not matching the input box text are given the id of hide
                $('ul.student-list').find("h3:not(:Contains("+filter+"))").parent().parent().attr("id","hide");
                //the students that are matching the input box text are given the id of show
                $('ul.student-list').find("h3:Contains("+filter+")").parent().parent().attr("id","show");
                //the emails that are matching the input box text are given the id of show
                $('ul.student-list').find("span[class*='email']:Contains("+filter+")").parent().parent().attr("id","show");
                //number of students with the id of show
                var studentLength=$('ul.student-list #show').length;
                //the pagination buttons are removed
                $('.pagination ul').children().remove();
                //run the function of createPagination. Pass the number of students with the id of show as an argument
                createPagination(studentLength,itemsPerPage);
            }
            //if the input box is empty
            else{
                //remove pagination buttons
                 $('.pagination ul').children().remove();
                //give all the students and id of show
                 $('ul.student-list').children().attr("id","show");
                //create pagination. Pass the total number of students as an argument
                 createPagination(ListItems,itemsPerPage);
            }
            //if there are no search results matching the input
            if($('li.student-item[id="show"]').length === 0){
                //show the noResult html
                $noResult.show();
            }
          }


      .detail-img-large
        img.img-responsive(src='/img/pagination_img_1.png')
      h3 Results
      p
      | The app was fully responsive and had no problems handling data up to a 1000 entries that was tested by myself. The app was designed in a way to be simple yet pleasent to the user. The search feature is extremely fast and the code is cross browser compatible so that won't be an issue. Using no libraries made this project even more fast as extra code isn't being loaded which gets in the way when the data is large.
      include ./partials/_work_detail_end
  script(src='https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js')    
  include ./partials/_js
