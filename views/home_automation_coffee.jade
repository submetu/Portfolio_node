extends layout

block content
  .container.work-detail-main
    .heading#heading-top
      h1 Automated Coffee
      h4  
        a.github(href="https://github.com/submetu/Home-Automation" target="_blank") Github Repository
      h5 Node.Js Socket.io MQTT NodeMCU 
    .detail
      p
      | The next step in was to apply these concepts to a real household application. Instead of using the arduino we used the NodeMCU as the micro-controller. There were several reasons for this. First, we needed a wireless connection between the device and the gateway. In order to do this, we had three main options.  
      ul.list
        li Arduino with WiFi shield
        li Esp8266
        li NodeMCU
      p The arduino WiFi shield route was too expensive and the dimensions of the whole device was pretty large. We wanted something more compact. The standalone Esp8266 module only exposed 2 or 3 of its GPIO pins which was a shame since it was really cheap. The NodeMCU on the other hand not only has the Esp8266,, but it also exposes its pins and has an on-board voltage regulator along with a mini USB interface. Its small and can run arduino code on it. There are several tutorials to do this online and its really simple. Just make sure that you have the 1.6.5 version of the arduino IDE or it wont work. 
       
      h3 Setup
      p So the plan was to have the NodeMCU connected to the router(gateway) through WiFi. The code on the NodeMCU was uploaded throught the Arduino's IDE and it was pretty much the same as the first step (using the LED and the temperature sensor). Instead of switching state of the LED, we switched state of a relay. The really itself required 5V to run and needed a 5V trigger Voltage. It was latching so we had to give continuous power to it to open the relay which was a shame. The NodeMCU's GPIO pins can only give a 3.3V output, hence we required a logic level converter that converted 3.3V to 5V. Pin 7 which corresponds to pin 13 on the arduino, was connected to the relay's trigger. We used a 8 AA battery pack to to power the whole mechanism and used a voltage divider to power the relay and NodeMCU with 5 volts. The NodeMCU has an onboard 5v to 3.3V voltage divider so we can just give the NodeMCU 5v. 

      h3 High Voltage handling
      p In order to not damage the coffee machine, we got our hands on an extension wire with 3 plug inputs. We opened the extension and connected its live and ground wires to the relay such that when the relay will be active low, the current would flow through the extension. This was a high voltage current (225V-230V) coming directly from the power socket in the house. So we had to be absolutely sure that everything we are doing is right in order not to blow up something. We made use of a multimeter to be absolutely sure that there are no short circuits or some problems before connecting our system to the power socket. The coffee machine's plug was put in the extension and the extension was connected to the power socket.

      .detail-img
        img.img-responsive(src='/img/home_automation_step1_img_1.png')
      p
      | The front-end is the same as before. The ON and OFF button now turn the coffee machine ON and OFF respectively instead of the LED. The temperature sensor is still connected to the arduino which is connected to the router via ethernet. So now, a NodeMCU-Relay-Coffee Machine system as well as the Temperature Sensor-Arduino system is talking to the Node.Js server via MQTT. This home automation system will be expanded by adding more systems, preferably NodeMCU systems for wireless capabilities. 
      
      h3 Results
      p
      | When you press the 'ON' button on the web page, the Coffee machine starts as the relay becomes active low. The opposite happens when the 'OFF' button is pressed on the webpage. The NodeMCU has high ranges going up to 200m with obstacles. The system however is not power efficient. Some future improvements include using a solid-state relay instead of the traditional relay. The power that it consumes is about 150mAh which is a lot. The solid-state relay will consume much less than this. Further more the voltage regulator on the NodeMCU also drains power, so in future projects the Esp-8266 can be used as a standalone device using the pins that are needed only. It can be programmed by a FTDI serial to USB programmer. For the batteries, there are many options and an appropriate one will be used depending on the power drain from the system. Obviously the AAA batteries used in this case would not be used. 
      include ./partials/_work_detail_end
  include ./partials/_js
